-------------------------Reports----------------------
--Report 1: Total Bookings By Hotel.
--Purpose: Track the number of bookings made for each hotel.
--Using stored procedure.

CREATE OR ALTER PROC totalBooking
AS
BEGIN
	SELECT h.HotelName, COUNT(b.BookingID) AS totlaBooking
	FROM Hotel h LEFT JOIN Room r
	ON r.HotelID=h.HotelID
	LEFT JOIN Booking b
	ON r.RoomID=b.RoomNumber
	GROUP BY h.HotelName 
	ORDER BY COUNT(b.BookingID) DESC
END

EXEC totalBooking
--------------------------------------------------------------
--Report 2: Revenue By Hotel.
--Purpose: Calculate the total revenue generated by each hotel.
--Using view.
CREATE OR ALTER VIEW HotelRevenue(HotelName, TotalRevenue)
AS 
SELECT h.HotelName, SUM(b.TotalPrice)
FROM Hotel h, Room r, Booking b
WHERE h.HotelID = r.HotelID AND b.RoomNumber = r.RoomID
GROUP BY h.HotelName

SELECT * FROM HotelRevenue 
---------------------------------------------------------------
--Report 3: Room Occupancy Rate.
--Purpose: Calculate the occupancy rate of rooms in each hotel.
--Using cursor.
DECLARE c1 CURSOR 
 FOR 
 SELECT h.HotelID, h.HotelName
 FROM  Hotel h
 FOR READ ONLY
 DECLARE @HotelID INT, @NumofRooms INT = 0, @RoomID INT,  @HotelName VARCHAR(100), @OccupiedRooms INT = 0--, @AccupancyRate INT
 OPEN c1 
 FETCH c1 INTO @HotelID, @HotelName
 WHILE @@FETCH_STATUS =0 
 BEGIN 
 SELECT @NumofRooms = COUNT(r.RoomID) FROM room r WHERE r.HotelID = @HotelID
 SELECT @OccupiedRooms = SUM(CASE WHEN r.Status = 'Occupied' THEN 1 ELSE 0 END)
 FROM Room r WHERE r.HotelID = @HotelID
 IF (@OccupiedRooms >= 1)
	BEGIN
	   SELECT @HotelName AS HotelName, CONCAT(@OccupiedRooms, '/', @NumofRooms) AS OccupancyRate
	END
 FETCH c1 INTO @HotelID, @HotelName
 END
 CLOSE c1
 DEALLOCATE c1
---------------------------------------------------------------
--Report 4: Top 10 Most Booked Rooms.
--Purpose: Identify the top 10 most booked rooms.
--Using stored procedure.
CREATE OR ALTER PROC top10bookingroom
WITH ENCRYPTION
AS
DECLARE @top10booking TABLE
(Roomid INT,
Hotelname VARCHAR(30),
Bookincont INT
)
BEGIN
	INSERT INTO @top10booking 
	SELECT r.RoomID,h.HotelName,COUNT(bb.BookingID) AS bookingcount
	FROM Booking bb INNER JOIN Room r
	ON r.RoomID = bb.RoomNumber 
	INNER JOIN Hotel h ON h.HotelID=r.HotelID
	GROUP BY r.RoomID,h.HotelName
	ORDER BY bookingcount DESC

	SELECT TOP 10 * FROM @top10booking
END
EXEC top10bookingroom
---------------------------------------------------------------
--Report 5: Monthly Revenue.
--Purpose: Calculate the monthly revenue for all hotels.
--Using function(Scalar).
CREATE OR ALTER FUNCTION GetMonthlyRevenueForHotel(@Hotelid INT, @year INT, @month INT)
RETURNS DECIMAL(10, 2)
AS 
BEGIN
DECLARE @MonthlyRevenue DECIMAL(10, 2);
SELECT @MonthlyRevenue = SUM(p.Amount)
FROM Booking b, Payment p, Room r
WHERE  b.BookingID = p.BookingID  AND r.RoomID = b.RoomNumber AND r.HotelID = @Hotelid  
AND MONTH(p.PaymentDate) = @month AND YEAR(p.PaymentDate) = @year
RETURN @MonthlyRevenue
END
GO
SELECT dbo.GetMonthlyRevenueForHotel(4,2024,6) AS MonthlyRevenue
---------------------------------------------------------------
--Report 6: Active Bookings.
--Purpose: List all currently active bookings.
--Using function(Inline).
CREATE OR ALTER FUNCTION GetActiveBooking()
RETURNS TABLE
AS
RETURN
(
	SELECT bk.BookingId AS [Booking ID], CONCAT(gs.FirstName, ' ', gs.LastName) AS [Guest Full Name],
	gs.Phone AS [Guest Phone], gs.Email AS [Guest Email], bk.RoomNumber AS [Room Number],
	bk.CheckinDate AS [Check In Date], bk.CheckoutDate AS [Check Out Date], bk.TotalPrice AS [Booking Total Price],
	pm.PaymentDate AS [Payment Date], pm.PaymentMethod AS [Payment Method]

	FROM Booking bk, guest gs, payment pm
	WHERE bk.GuestID = gs.GuestID AND pm.bookingid = bk.bookingid AND FORMAT(GETDATE(), 'yyyy-MM-dd') BETWEEN bk.CheckinDate AND bk.CheckoutDate
)
GO
SELECT * FROM dbo.GetActiveBooking()
---------------------------------------------------------------
--Report 7: Guest Booking History.
--Purpose: Detailed booking history of a specific guest.
--Using view(all guests)/stored procedure(single guest).
CREATE OR ALTER VIEW GuestBoookingHostory([Guest Full Name],[Check In Date],[Check Out Date],[Hotel Name],[Room Number],[Booking Price])
WITH ENCRYPTION
AS
SELECT CONCAT(gs.FirstName, ' ', gs.LastName), bk.CheckinDate, bk.CheckoutDate, ht.HotelName, rm.RoomID, bk.TotalPrice
FROM Guest gs, Booking bk, Room rm, Hotel ht
WHERE gs.GuestID=bk.GuestID AND rm.HotelID = ht.HotelID AND rm.RoomID = bk.RoomNumber
GO

SELECT * FROM GuestBoookingHostory

SELECT [Guest Full Name], COUNT([Guest Full Name]) AS [Bookings Count]
FROM GuestBoookingHostory
GROUP BY [Guest Full Name]
ORDER BY COUNT([Guest Full Name]) DESC
-----
CREATE OR ALTER PROC GetGuestBookingHistory @GuestId INT
AS
BEGIN
SELECT  bk.bookingid AS [Booking ID], CONCAT(gs.FirstName, ' ', gs.LastName) AS [Guest Full Name],
gs.Phone AS [Guest Phone], gs.Email AS [Guest Email], bk.RoomNumber AS [Room Number],
bk.CheckinDate AS [Check In Date], bk.CheckoutDate AS [Check Out Date],
bk.TotalPrice AS [Booking Total Price], pm.PaymentDate AS [Payment Date], pm.PaymentMethod AS [Payment Method]
FROM booking bk, guest gs, payment pm
WHERE bk.guestid = gs.guestid AND pm.bookingid = bk.bookingid AND gs.guestid = @GuestId
END
GO
SELECT * FROM GuestBoookingHostory
EXECUTE GetGuestBookingHistory 3
---------------------------------------------------------------
--Report 8: Room Status Summary.
--Purpose: Summary of room statuses (Occupied, Available, Maintenance).
--Using stored procedure.
CREATE OR ALTER PROC RoomStatusSummary
WITH ENCRYPTION
AS
BEGIN
	DECLARE @roomstatus VARCHAR(30), @statuscount INT

	DECLARE C1 CURSOR
	FOR 
		SELECT r.Status, COUNT(r.Status)
		FROM Room r
		GROUP BY r.Status
	OPEN C1
	FETCH C1 INTO @roomstatus, @statuscount
	DECLARE @summry TABLE(
	Rstatus VARCHAR(30),
	Scount INT
	)
	WHILE @@FETCH_STATUS=0
		BEGIN
			INSERT INTO @summry VALUES(@roomstatus,@statuscount)
			FETCH C1 INTO @roomstatus,@statuscount
		END
	CLOSE C1
	DEALLOCATE C1

SELECT * FROM @summry 
END
GO
EXEC RoomStatusSummary
---------------------------------------------------------------
--Report 9: Hotel Revenue Breakdown.
--Purpose: Revenue breakdown by hotel.
DECLARE HotelTotalRevenue CURSOR
FOR
SELECT SUM(bk.TotalPrice) AS [Total Revenue], ht.HotelName
FROM booking bk, room rm, hotel ht
WHERE bk.RoomNumber = rm.RoomID AND rm.HotelID = ht.HotelID
GROUP BY ht.HotelName
FOR READ ONLY
DECLARE @Total INT, @Hotel VARCHAR(70)
OPEN HotelTotalRevenue
FETCH HotelTotalRevenue INTO @Total, @Hotel
WHILE @@FETCH_STATUS = 0
BEGIN
SELECT @Total AS [Total Revenue], @Hotel AS [Hotel Name]
FETCH HotelTotalRevenue INTO @Total, @Hotel
END
CLOSE HotelTotalRevenue
DEALLOCATE HotelTotalRevenue
GO
EXECUTE GetTopGuests 10
---------------------------------------------------------------
--Report 10: Top Guests by Spending.
--Purpose: Identify the top guests based on their total spending.
--Using stored procedure.
CREATE OR ALTER PROC GetTopGuests @GuestNumber INT
AS
BEGIN
SELECT TOP(@GuestNumber) gs.guestid AS [Guest ID], CONCAT(gs.firstname, ' ', gs.lastname) AS [Guest Full Name],
SUM(bk.totalprice) AS [Total Spending], DENSE_RANK() OVER (ORDER BY SUM(bk.TotalPrice) DESC) AS [Ranking]
FROM booking bk, guest gs 
WHERE bk.guestid = gs.guestid
GROUP BY gs.guestid, gs.firstname, gs.lastname
END
GO
EXEC GetTopGuests 6
---------------------------------------------------------------